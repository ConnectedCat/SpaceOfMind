package {	import flash.display.*;	import flash.events.*;//for event handling	import flash.net.Socket;//Sockets	import com.adobe.serialization.json.*;//as3corelib JSON support	import flash.geom.*;//for ColorTransform	import flash.media.*;	import fl.transitions.Tween;	import fl.transitions.easing.*;	//import com.gskinner.motion.GTween;	//import com.gskinner.motion.plugins.SoundTransformPlugin;	import com.greensock.TweenLite;	import com.greensock.plugins.TweenPlugin;	import com.greensock.plugins.VolumePlugin;	TweenPlugin.activate([VolumePlugin]); 	public class DisplayWindow extends Sprite	{		// Public Properties:		public var attention:uint;		public var meditation:uint;		public var poorSignal:uint;		public var deltaWave:uint;		public var thetaWave:uint;		public var lowAlphaWave:uint;		public var highAlphaWave:uint;		public var lowBetaWave:uint;		public var highBetaWave:uint;		public var lowGammaWave:uint;		public var highGammaWave:uint;		// Private Properties:		private var thinkGearSocket:Socket;		private var redSine:Sound;		private var channelRedSine:SoundChannel;		private var stRedSine:SoundTransform;		private var orangeSine:Sound;		private var channelOrangeSine:SoundChannel;		private var stOrangeSine:SoundTransform;		private var yellowSine:Sound;		private var channelYellowSine:SoundChannel;		private var stYellowSine:SoundTransform;		private var greenSine:Sound;		private var channelGreenSine:SoundChannel;		private var stGreenSine:SoundTransform;		private var blueSine:Sound;		private var channelBlueSine:SoundChannel;		private var stBlueSine:SoundTransform;		private var purpleSine:Sound;		private var channelPurpleSine:SoundChannel;		private var stPurpleSine:SoundTransform;		private var violetSine:Sound;		private var channelVioletSine:SoundChannel;		private var stVioletSine:SoundTransform;		//private var timer:Timer;		public function DisplayWindow()		{			// constructor code			//initialize sound waves and their channels			redSine = new RedSine();			channelRedSine = redSine.play(0, 100000);			stRedSine = channelRedSine.soundTransform;			stRedSine.volume = 0.05;			channelRedSine.soundTransform = stRedSine;			orangeSine = new OrangeSine();			channelOrangeSine = orangeSine.play(0,100000);			stOrangeSine = channelOrangeSine.soundTransform;			stOrangeSine.volume = 0.05;			channelOrangeSine.soundTransform = stOrangeSine;			yellowSine = new YellowSine();			channelYellowSine = yellowSine.play(0,100000);			stYellowSine = channelYellowSine.soundTransform;			stYellowSine.volume = 0.05;			channelYellowSine.soundTransform = stYellowSine;			greenSine = new GreenSine();			channelGreenSine = greenSine.play(0,100000);			stGreenSine = channelGreenSine.soundTransform;			stGreenSine.volume = 0.05;			channelGreenSine.soundTransform = stGreenSine;			blueSine = new BlueSine();			channelBlueSine = blueSine.play(0,100000);			stBlueSine = channelBlueSine.soundTransform;			stBlueSine.volume = 0.05;			channelBlueSine.soundTransform = stBlueSine;			purpleSine = new PurpleSine();			channelPurpleSine = purpleSine.play(0,100000);			stPurpleSine = channelPurpleSine.soundTransform;			stPurpleSine.volume = 0.05;			channelPurpleSine.soundTransform = stPurpleSine;			violetSine = new VioletSine();			channelVioletSine = violetSine.play(0,100000);			stVioletSine = channelVioletSine.soundTransform;			stVioletSine.volume = 0.05;			channelVioletSine.soundTransform = stVioletSine;			thinkGearSocket = new Socket();			thinkGearSocket.addEventListener(ProgressEvent.SOCKET_DATA, dataHandler);			thinkGearSocket.connect("127.0.0.1", 13854);			var configuration : Object = new Object();			configuration["enableRawOutput"] = false;			configuration["format"] = "Json";			thinkGearSocket.writeUTFBytes(JSON.encode(configuration));		}		// Protected Methods:;		private function dataHandler(e : ProgressEvent)		{			var packetString:String = thinkGearSocket.readUTFBytes(thinkGearSocket.bytesAvailable);			thinkGearSocket.flush();			var packets:Array = packetString.split(/\r/);			var data:Object;			for each (var packet:String in packets)			{				if (packet != "")				{					try					{						data = JSON.decode(packet);					}					catch (jError:JSONParseError)					{						//do error handling here					}					if (data["poorSignalLevel"] != null)					{						poorSignal = data["poorSignalLevel"];						var redWTween:Tween;						var redHTween:Tween;						var orangeWTween:Tween;						var orangeHTween:Tween;						var yellowWTween:Tween;						var yellowHTween:Tween;						var greenWTween:Tween;						var greenHTween:Tween;						var blueWTween:Tween;						var blueHTween:Tween;						var purpleWTween:Tween;						var purpleHTween:Tween;						var violetWTween:Tween;						var violetHTween:Tween;						if (poorSignal == 0)						{							attention = data["eSense"]["attention"];							meditation = data["eSense"]["meditation"];							deltaWave = data["eegPower"]["delta"];							thetaWave = data["eegPower"]["theta"];							lowAlphaWave = data["eegPower"]["lowAlpha"];							highAlphaWave = data["eegPower"]["highAlpha"];							lowBetaWave = data["eegPower"]["lowBeta"];							highBetaWave = data["eegPower"]["highBeta"];							lowGammaWave = data["eegPower"]["lowGamma"];							highGammaWave = data["eegPower"]["highGamma"];							var newRedVolume:Number = map(deltaWave,0,16777216 / 5,0,1);							//label1.text = "newRedVolume :" + newRedVolume.toString();							var redSineTween:TweenLite = TweenLite.to(channelRedSine, 1, {volume:newRedVolume, onUpdate:updateRedChannel});							function updateRedChannel():void {									var stR : SoundTransform = new SoundTransform(channelRedSine.soundTransform.volume, 0 );     								channelRedSine.soundTransform = stR;									//label2.text = "Red Volume: " + channelRedSine.soundTransform.volume.toString();							}														var newOrangeVolume:Number = map(thetaWave,0,16777216 / 5,0,1);							var orangeSineTween:TweenLite = TweenLite.to(channelOrangeSine, 1, {volume:newOrangeVolume, onUpdate:updateOrangeChannel});							function updateOrangeChannel():void {									var stO : SoundTransform = new SoundTransform(channelOrangeSine.soundTransform.volume, 0 );     								channelRedSine.soundTransform = stO;							}														var newYellowVolume:Number = map(lowAlphaWave,0,16777216 / 5,0,1);							var yellowSineTween:TweenLite = TweenLite.to(channelYellowSine, 1, {volume:newYellowVolume, onUpdate:updateYellowChannel});							function updateYellowChannel():void {									var stY : SoundTransform = new SoundTransform(channelYellowSine.soundTransform.volume, 0 );     								channelYellowSine.soundTransform = stY;							}														var newGreenVolume:Number = map(highAlphaWave,0,16777216 / 5,0,1);							var greenSineTween:TweenLite = TweenLite.to(channelGreenSine, 1, {volume:newGreenVolume, onUpdate:updateGreenChannel});							function updateGreenChannel():void {									var stG : SoundTransform = new SoundTransform(channelGreenSine.soundTransform.volume, 0 );     								channelGreenSine.soundTransform = stG;							}														var newBlueVolume:Number = map(lowBetaWave,0,16777216 / 5,0,1);							var blueSineTween:TweenLite = TweenLite.to(channelBlueSine, 1, {volume:newBlueVolume, onUpdate:updateBlueChannel});							function updateBlueChannel():void {									var stB : SoundTransform = new SoundTransform(channelBlueSine.soundTransform.volume, 0 );     								channelBlueSine.soundTransform = stB;							}														var newPurpleVolume:Number = map(highBetaWave,0,16777216 / 5,0,1);							var purpleSineTween:TweenLite = TweenLite.to(channelPurpleSine, 1, {volume:newPurpleVolume, onUpdate:updatePurpleChannel});							function updatePurpleChannel():void {									var stP : SoundTransform = new SoundTransform(channelPurpleSine.soundTransform.volume, 0 );     								channelPurpleSine.soundTransform = stP;							}														var newVioletVolume:Number = map(deltaWave,0,16777216 / 5,0,1);							var violetSineTween:TweenLite = TweenLite.to(channelVioletSine, 1, {volume:newVioletVolume, onUpdate:updateVioletChannel});							function updateVioletChannel():void {									var stV : SoundTransform = new SoundTransform(channelVioletSine.soundTransform.volume, 0 );     								channelVioletSine.soundTransform = stV;							}							var newRedPos:int = map(deltaWave,0,16777216,50,100000);//calculate new size of ball							redWTween = new Tween(redBall,"width",Regular.easeInOut,redBall.width,newRedPos,0.95,true);							redHTween = new Tween(redBall,"height",Regular.easeInOut,redBall.height,newRedPos,0.95,true);							var newOrangePos:int = map(thetaWave,0,16777216,50,100000);							orangeWTween = new Tween(orangeBall,"width",Regular.easeInOut,orangeBall.width,newOrangePos,0.95,true);							orangeHTween = new Tween(orangeBall,"height",Regular.easeInOut,orangeBall.height,newOrangePos,0.95,true);														var newYellowPos:int = map(lowAlphaWave,0,16777216,50,100000);							yellowWTween = new Tween(yellowBall,"width",Regular.easeInOut,yellowBall.width,newYellowPos,0.95,true);							yellowHTween = new Tween(yellowBall,"height",Regular.easeInOut,yellowBall.height,newYellowPos,0.95,true);							var newGreenPos:int = map(highAlphaWave,0,16777216,50,100000);							greenWTween = new Tween(greenBall,"width",Regular.easeInOut,greenBall.width,newGreenPos,0.95,true);							greenHTween = new Tween(greenBall,"height",Regular.easeInOut,greenBall.height,newGreenPos,0.95,true);							var newBluePos:int = map(lowBetaWave,0,16777216,50,100000);							blueWTween = new Tween(blueBall,"width",Regular.easeInOut,blueBall.width,newBluePos,0.95,true);							blueHTween = new Tween(blueBall,"height",Regular.easeInOut,blueBall.height,newBluePos,0.95,true);							var newPurplePos:int = map(highBetaWave,0,16777216,50,100000);							purpleWTween = new Tween(purpleBall,"width",Regular.easeInOut,purpleBall.width,newPurplePos,0.95,true);							purpleHTween = new Tween(purpleBall,"height",Regular.easeInOut,purpleBall.height,newPurplePos,0.95,true);							var newVioletPos:int = map(lowGammaWave,0,16777216,50,100000);							violetWTween = new Tween(violetBall,"width",Regular.easeInOut,violetBall.width,newVioletPos,0.95,true);							violetHTween = new Tween(violetBall,"height",Regular.easeInOut,violetBall.height,newVioletPos,0.95,true);						}						else						{							if (poorSignal == 200)							{								attention = 0;								meditation = 0;							}						}					}				}				data = null;				/*label1.text = "Attention: " + attention.toString();				label2.text = "Meditation: " + meditation.toString();				label3.text = "Poor Signal: " + poorSignal.toString();				labelDelta.text = "Delta: " + deltaWave.toString();				labelTheta.text = "Theta: " + thetaWave.toString();				labelLowAlpha.text = "Low Alpha: " + lowAlphaWave.toString();				labelHighAlpha.text = "High Alpha: " + highAlphaWave.toString();				labelLowBeta.text = "Low Beta: " + lowBetaWave.toString();				labelHighBeta.text = "High Beta: " + highBetaWave.toString();				labelLowGamma.text = "Low Gamma: " + lowGammaWave.toString();				labelHighGamma.text = "High Gamma: " + highGammaWave.toString();*/			}/*end for each*/		}/*end function dataHandler*/		private function map(v:Number, a:Number, b:Number, x:Number = 0, y:Number = 1):Number		{			return (v == a) ? x : (v - a) * (y - x) / (b - a) + x;		}	}}