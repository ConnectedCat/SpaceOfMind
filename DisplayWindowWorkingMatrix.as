package {	import flash.display.*;	import flash.events.*;//for event handling	import flash.net.Socket;//Sockets	import com.adobe.serialization.json.*;//as3corelib JSON support	import flash.geom.*;//for ColorTransform	import flash.media.*;	public class DisplayWindow extends Sprite	{		// Public Properties:		public var attention:uint;		public var meditation:uint;		public var poorSignal:uint;		public var deltaWave:uint;		public var thetaWave:uint;		public var lowAlphaWave:uint;		public var highAlphaWave:uint;		public var lowBetaWave:uint;		public var highBetaWave:uint;		public var lowGammaWave:uint;		public var highGammaWave:uint;				// Private Properties:		private var thinkGearSocket:Socket;		private var redSquare:Sprite;//add sprite		private var orangeSquare:Sprite;//add sprite		private var yellowSquare:Sprite;//add sprite		private var greenSquare:Sprite;//add sprite		private var blueSquare:Sprite;//add sprite		private var purpleSquare:Sprite;//add sprite		private var violetSquare:Sprite;//add sprite				private var matrixRed:Matrix;		private var matrixOrange:Matrix;		private var redSine:Sound;		private var channelRedSine:SoundChannel;		private var stRedSine:SoundTransform;		private var orangeSine:Sound;		private var channelOrangeSine:SoundChannel;		private var stOrangeSine:SoundTransform;				private var yellowSine:Sound;		private var channelYellowSine:SoundChannel;		private var stYellowSine:SoundTransform;				private var greenSine:Sound;		private var channelGreenSine:SoundChannel;		private var stGreenSine:SoundTransform;				private var blueSine:Sound;		private var channelBlueSine:SoundChannel;		private var stBlueSine:SoundTransform;				private var purpleSine:Sound;		private var channelPurpleSine:SoundChannel;		private var stPurpleSine:SoundTransform;				private var violetSine:Sound;		private var channelVioletSine:SoundChannel;		private var stVioletSine:SoundTransform;				public function DisplayWindow()		{			// constructor code						//initialize sound waves and their channels			redSine = new RedSine();			channelRedSine = redSine.play(0,100);			stRedSine = channelRedSine.soundTransform;			orangeSine = new OrangeSine();			channelOrangeSine = orangeSine.play(0,100);			stOrangeSine = channelOrangeSine.soundTransform;						yellowSine = new YellowSine();			channelYellowSine = yellowSine.play(0,100);			stYellowSine = channelYellowSine.soundTransform;						greenSine = new GreenSine();			channelGreenSine = greenSine.play(0,100);			stGreenSine = channelGreenSine.soundTransform;						blueSine = new BlueSine();			channelBlueSine = blueSine.play(0,100);			stBlueSine = channelBlueSine.soundTransform;						purpleSine = new PurpleSine();			channelPurpleSine = purpleSine.play(0,100);			stPurpleSine = channelPurpleSine.soundTransform;						violetSine = new VioletSine();			channelVioletSine = violetSine.play(0,100);			stVioletSine = channelVioletSine.soundTransform;						//initialize squares			var matrixRed:Matrix = new Matrix();              matrixRed.createGradientBox(300,300,0,0,0);						redSquare = new Sprite();			redSquare.graphics.beginGradientFill(GradientType.RADIAL, [0xFF0000, 0xFF0000], [1,0], [0,255], matrixRed);			redSquare.graphics.drawRect(0, 0, 300, 300);			redSquare.graphics.endFill();			addChild(redSquare);						var matrixOrange:Matrix = new Matrix();              matrixOrange.createGradientBox(300,300,0,0,0);						orangeSquare = new Sprite();			orangeSquare.graphics.beginGradientFill(GradientType.RADIAL, [0xFF8800, 0xFF8800], [1,0], [0,255], matrixOrange);			orangeSquare.graphics.drawRect(300, 0, 300, 300);			orangeSquare.graphics.endFill();			addChild(orangeSquare);						/*yellowSquare = new Sprite();			yellowSquare.graphics.beginGradientFill(GradientType.RADIAL, [0xFFFF00, 0xFFFF00], [1,0], [0,255], matrix);			yellowSquare.graphics.drawRect(600, 0, 300, 300);			yellowSquare.graphics.endFill();			addChild(yellowSquare);						greenSquare = new Sprite();			greenSquare.graphics.beginGradientFill(GradientType.RADIAL, [0x00FF00, 0x00FF00], [1,0], [0,255], matrix);			greenSquare.graphics.drawRect(0, 300, 300, 300);			greenSquare.graphics.endFill();			addChild(greenSquare);						blueSquare = new Sprite();			blueSquare.graphics.beginGradientFill(GradientType.RADIAL, [0x0000FF, 0x0000FF], [1,0], [0,255], matrix);			blueSquare.graphics.drawRect(300, 300, 300, 300);			blueSquare.graphics.endFill();			addChild(blueSquare);						purpleSquare = new Sprite();			purpleSquare.graphics.beginGradientFill(GradientType.RADIAL, [0x660088, 0x660088], [1,0], [0,255], matrix);			purpleSquare.graphics.drawRect(600, 300, 300, 300);			purpleSquare.graphics.endFill();			addChild(purpleSquare);						violetSquare = new Sprite();			violetSquare.graphics.beginGradientFill(GradientType.RADIAL, [0xFF00FF, 0xFF00FF], [1,0], [0,255], matrix);			violetSquare.graphics.drawRect(0, 600, 300, 300);			violetSquare.graphics.endFill();			addChild(violetSquare);*/			thinkGearSocket = new Socket();			thinkGearSocket.addEventListener(ProgressEvent.SOCKET_DATA, dataHandler);			thinkGearSocket.connect("127.0.0.1", 13854);			var configuration : Object = new Object();			configuration["enableRawOutput"] = false;			configuration["format"] = "Json";			thinkGearSocket.writeUTFBytes(JSON.encode(configuration));					}		// Protected Methods:;		private function dataHandler(e : ProgressEvent)		{			var packetString:String = thinkGearSocket.readUTFBytes(thinkGearSocket.bytesAvailable);			thinkGearSocket.flush();			var packets:Array = packetString.split(/\r/);			var data:Object;			for each (var packet:String in packets)			{				if (packet != "")				{					try					{						data = JSON.decode(packet);					}					catch (jError:JSONParseError)					{						//do error handling here					}					if (data["poorSignalLevel"] != null)					{						poorSignal = data["poorSignalLevel"];						//var yTween:Tween;						if (poorSignal == 0)						{							attention = data["eSense"]["attention"];							meditation = data["eSense"]["meditation"];							deltaWave = data["eegPower"]["delta"];							thetaWave = data["eegPower"]["theta"];							lowAlphaWave = data["eegPower"]["lowAlpha"];							highAlphaWave = data["eegPower"]["highAlpha"];							lowBetaWave = data["eegPower"]["lowBeta"];							highBetaWave = data["eegPower"]["highBeta"];							lowGammaWave = data["eegPower"]["lowGamma"];							highGammaWave = data["eegPower"]["highGamma"];							stRedSine.volume = map(deltaWave,0,16777216,0,1);							channelRedSine.soundTransform = stRedSine;							stOrangeSine.volume = map(thetaWave,0,16777216,0,1);							channelOrangeSine.soundTransform = stOrangeSine;														stYellowSine.volume = map(lowAlphaWave,0,16777216,0,1);							channelYellowSine.soundTransform = stYellowSine;														stGreenSine.volume = map(highAlphaWave,0,16777216,0,1);							channelGreenSine.soundTransform = stGreenSine;														stBlueSine.volume = map(lowBetaWave,0,16777216,0,1);							channelBlueSine.soundTransform = stBlueSine;														stPurpleSine.volume = map(highBetaWave,0,16777216,0,1);							channelPurpleSine.soundTransform = stPurpleSine;														stVioletSine.volume = map(lowGammaWave,0,16777216,0,1);							channelVioletSine.soundTransform = stVioletSine;							var redSquareAlpha:Number = map(deltaWave,0,16777216,0,1);							var orangeSquareAlpha:Number = map(thetaWave,0,16777216,0,1);							var yellowSquareAlpha:Number = map(lowAlphaWave,0,16777216,0,1);							var greenSquareAlpha:Number = map(highAlphaWave,0,16777216,0,1);							var blueSquareAlpha:Number = map(lowBetaWave,0,16777216,0,1);							var purpleSquareAlpha:Number = map(highBetaWave,0,16777216,0,1);							var violetSquareAlpha:Number = map(lowGammaWave,0,16777216,0,1);							//var redAlphaTransform = new ColorTransform(0,0,0,1,0,0,0,redSquareAlpha);							trace(redSquareAlpha);							redSquare.alpha = redSquareAlpha;														//var orangeAlphaTransform = new ColorTransform(0,0,0,1,0,0,0,orangeSquareAlpha);							orangeSquare.alpha = orangeSquareAlpha;														//var yellowAlphaTransform = new ColorTransform(0,0,0,1,0,0,0,yellowSquareAlpha);							yellowSquare.alpha = yellowSquareAlpha;														//var greenAlphaTransform = new ColorTransform(0,0,0,1,0,0,0,greenSquareAlpha);							greenSquare.alpha = greenSquareAlpha;														//var blueAlphaTransform = new ColorTransform(0,0,0,1,0,0,0,blueSquareAlpha);							blueSquare.alpha = blueSquareAlpha;														//var purpleAlphaTransform = new ColorTransform(0,0,0,1,0,0,0,purpleSquareAlpha);							purpleSquare.alpha = purpleSquareAlpha;														//var violetAlphaTransform = new ColorTransform(0,0,0,1,0,0,0,violetSquareAlpha);							violetSquare.alpha = violetSquareAlpha;							//var newPos:int = 350 - (attention * 3.5);//calculate new position of ball							//yTween = new Tween(circle,"y",Elastic.easeOut,circle.y,newPos,0.95,true);//move ball						}						else						{							if (poorSignal == 200)							{								attention = 0;								meditation = 0;								//yTween = new Tween(circle,"y",Strong.easeOut,circle.y,350,0.75,true);//move ball back							}						}					}				}				data = null;				label1.text = "Attention: " + attention.toString();				label2.text = "Meditation: " + meditation.toString();				label3.text = "Poor Signal: " + poorSignal.toString();				labelDelta.text = "Delta: " + deltaWave.toString();				labelTheta.text = "Theta: " + thetaWave.toString();				labelLowAlpha.text = "Low Alpha: " + lowAlphaWave.toString();				labelHighAlpha.text = "High Alpha: " + highAlphaWave.toString();				labelLowBeta.text = "Low Beta: " + lowBetaWave.toString();				labelHighBeta.text = "High Beta: " + highBetaWave.toString();				labelLowGamma.text = "Low Gamma: " + lowGammaWave.toString();				labelHighGamma.text = "High Gamma: " + highGammaWave.toString();			}/*for each*/		}/*function dataHandler*/		private function map(v:Number, a:Number, b:Number, x:Number = 0, y:Number = 1):Number		{			return (v == a) ? x : (v - a) * (y - x) / (b - a) + x;		}	}}